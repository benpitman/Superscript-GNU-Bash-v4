#!/bin/bash

Show_Help() {
    # Display horizontal line
    seq -s- $(( $( tput cols ) + 1 )) | tr -d '[0-9]'
    cat << ____HELP
Usage: ${0##*/} [-h] [-g] [-x]...
Runs the game in the current terminal window by default

        -h      displays this help text and exits

        -g      plays the game in a new gnome-terminal window

        -u      uninstalls the game

        -x      runs in debug mode
                all output it sent to /var/games/superscript/debug.log

NOTES:
        Any errors that show up, please report the contents of
        /var/games/superscript/error.log to me at my GitHub page.
        If the bug is persistent and throws no errors, please use the '-x'
        option and report the contents of /var/games/superscript/debug.log instead.

Copyright © Ben Pitman
____HELP
    seq -s- $(( $( tput cols ) + 1 )) | tr -d '[0-9]'
    exit 0
}

Uninstall() {
    local PASS
    if [[ "$USER" != "root" ]]; then
        sudo -k
        printf 'Your password is required to uninstall this game.
                \rLeave blank to cancel uninstall.'
        while read -rsp $'\n> ' PASS; do
            [ -z "$PASS" ] && exit 0
            if { echo "$PASS" | sudo -Svp ''; } 2>/dev/null; then
                break
            else
                printf 'Error: Invalid Password'
            fi
        done
        do_sudo=sudo
    else
        do_sudo=
    fi
    # while read -rp $'\n(Y/N)> ' del_level; do
    #     [[ "$del_level" == [Nn] ]] && exit 0
    #
    # done
    $do_sudo rm -r /usr/local/lib/superscript /var/games/superscript
    $do_sudo rm /usr/local/bin/superscript-game     \
        /usr/local/bin/superscript                  \
        /usr/share/applications/superscript.desktop \
        /home/$USER/Desktop/Superscript.desktop 2>/dev/null
    printf 'Uninstallation complete\n'
    exit 0
}

Check_Terminal_Size() {

    (( $( tput cols ) > 48 && $( tput lines ) > 38 )) && return

    local               \
        max_width=48    \
        max_height=38

    printf  'Your terminal is not large enough\n'
    if hash resize 2>/dev/null; then
        printf 'Would you like to resize it automatically?\n'
        while read -rp 'Y/N> ' term_resize; do
            if [[ "$term_resize" == [Yy] ]]; then
                resize -s 39 49 &>/dev/null
                return
            elif [[ "$term_resize" == [Nn] ]]; then
                break
            fi
        done
    fi

    printf 'Please resize the window to the following grid\n'
    read -rsp "Press enter to continue, and again to refresh or finish"
    tput civis
    until (( $( tput cols ) > $max_width && $( tput lines ) > $max_height )); do
        (( term_width = ($( tput cols ) - 1) ))
        # (( term_height = ($LINES - 1) ))
        (( box_width = ($max_width > $term_width ? $term_width : $max_width) ))
        # (( box_height = ($max_height > $term_height ? $term_height : $max_height) ))
        tput clear
        tput cup 0 0
        for (( y = 0; $y <= $max_height; y++ )); do
            for (( x = 0; $x <= $box_width; x++ )); do
                if (( $y == 0 )); then
                    if (( $x == 0 )); then
                        printf '\u250c' # ┌
                    elif (( $x == ($max_width / 2) )); then
                        printf '\u252c' # ┬
                    elif (( $x == $max_width )); then
                        printf '\u2510' # ┐
                    else
                        printf '\u2500' # ─
                    fi
                elif (( $y == ($max_height / 2) )); then
                    if (( $x == 0 )); then
                        printf '\u251c' # ├
                    elif (( $x == ($max_width / 2) )); then
                        printf '\u253c' # ┼
                    elif (( $x == $max_width )); then
                        printf '\u2524' # ┤
                    else
                        printf '\u2500' # ─
                    fi
                elif (( $y == $max_height )); then
                    if (( $x == 0 )); then
                        printf '\u2514' # └
                    elif (( $x == ($max_width / 2) )); then
                        printf '\u2534' # ┴
                    elif (( $x == $max_width )); then
                        printf '\u2518' # ┘
                    else
                        printf '\u2500' # ─
                    fi
                elif (( $x == 0 || $x == ($max_width / 2) || $x == $max_width )); then
                    printf '\u2502' # │
                else
                    printf ' '
                fi
            done
            (( $y != $max_height )) && echo
        done
        read -s
    done
    tput cvvis
}

graphical_mode=false
debug_mode=false
while getopts ":h :g :u :x" arg; do
    case $arg in
        h)  Show_Help;;
        g)  graphical_mode=true;;
        u)  Uninstall;;
        x)  debug_mode=true;;
        \?) printf "Invalid option -$OPTARG\n";;
    esac
done

if $graphical_mode; then
    if ! hash gnome-terminal 2>/dev/null; then
        printf 'gnome-terminal is not installed\n'
        exit 1
    fi
    gnome-terminal                  \
        --title "Superscript"       \
        --geometry 49x39+800+250 -e \
        "bash superscript-game $graphical_mode $debug_mode" 2>/dev/null
else
    Check_Terminal_Size
    bash superscript-game "$graphical_mode" "$debug_mode"
fi
exit 0
